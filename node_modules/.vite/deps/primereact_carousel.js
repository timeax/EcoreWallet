"use client";
import {
  ChevronUpIcon
} from "./chunk-MQ4VHONX.js";
import {
  ChevronLeftIcon
} from "./chunk-RBHAS2LL.js";
import {
  ChevronDownIcon
} from "./chunk-NEEOYLTH.js";
import {
  Ripple
} from "./chunk-DVMHZHGZ.js";
import {
  ChevronRightIcon
} from "./chunk-OTJM6MRB.js";
import "./chunk-S3XDNBMU.js";
import {
  ComponentBase,
  useHandleStyle,
  useMergeProps,
  useMountEffect,
  usePrevious,
  useResizeListener,
  useUpdateEffect
} from "./chunk-ELSH6NYQ.js";
import {
  PrimeReact,
  PrimeReactContext,
  ariaLabel,
  localeOption
} from "./chunk-I2BZ4KOS.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  UniqueComponentId,
  classNames
} from "./chunk-TZDUQDZZ.js";
import {
  require_react
} from "./chunk-GMHSYVPX.js";
import {
  __toESM
} from "./chunk-UV5CTPV7.js";

// node_modules/primereact/carousel/carousel.esm.js
var React = __toESM(require_react());
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var styles = "\n@layer primereact {\n    .p-carousel {\n        display: flex;\n        flex-direction: column;\n    }\n    \n    .p-carousel-content {\n        display: flex;\n        flex-direction: column;\n        overflow: auto;\n    }\n    \n    .p-carousel-prev,\n    .p-carousel-next {\n        align-self: center;\n        flex-grow: 0;\n        flex-shrink: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .p-carousel-container {\n        display: flex;\n        flex-direction: row;\n    }\n    \n    .p-carousel-items-content {\n        overflow: hidden;\n        width: 100%;\n    }\n    \n    .p-carousel-items-container {\n        display: flex;\n        flex-direction: row;\n    }\n    \n    .p-carousel-indicators {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        flex-wrap: wrap;\n    }\n    \n    .p-carousel-indicator > button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    \n    /* Vertical */\n    .p-carousel-vertical .p-carousel-container {\n        flex-direction: column;\n    }\n    \n    .p-carousel-vertical .p-carousel-items-container {\n        flex-direction: column;\n        height: 100%;\n    }\n    \n    /* Keyboard Support */\n    .p-items-hidden .p-carousel-item {\n        visibility: hidden;\n    }\n    \n    .p-items-hidden .p-carousel-item.p-carousel-item-active {\n        visibility: visible;\n    }\n}\n";
var classes = {
  root: function root(_ref) {
    var isVertical = _ref.isVertical;
    return classNames("p-carousel p-component", {
      "p-carousel-vertical": isVertical,
      "p-carousel-horizontal": !isVertical
    });
  },
  container: "p-carousel-container",
  content: "p-carousel-content",
  indicators: "p-carousel-indicators p-reset",
  header: "p-carousel-header",
  footer: "p-carousel-footer",
  itemsContainer: "p-carousel-items-container",
  itemsContent: "p-carousel-items-content",
  previousButton: function previousButton(_ref2) {
    var isDisabled = _ref2.isDisabled;
    return classNames("p-carousel-prev p-link", {
      "p-disabled": isDisabled
    });
  },
  previousButtonIcon: "p-carousel-prev-icon",
  nextButton: function nextButton(_ref3) {
    var isDisabled = _ref3.isDisabled;
    return classNames("p-carousel-next p-link", {
      "p-disabled": isDisabled
    });
  },
  nextButtonIcon: "p-carousel-next-icon",
  indicator: function indicator(_ref4) {
    var isActive = _ref4.isActive;
    return classNames("p-carousel-indicator", {
      "p-highlight": isActive
    });
  },
  indicatorButton: "p-link",
  itemCloned: function itemCloned(_ref5) {
    var props = _ref5.itemProps;
    return classNames(props.className, "p-carousel-item", {
      "p-carousel-item-active": props.active,
      "p-carousel-item-start": props.start,
      "p-carousel-item-end": props.end
    });
  },
  item: function item(_ref6) {
    var props = _ref6.itemProps;
    return classNames(props.className, "p-carousel-item", {
      "p-carousel-item-active": props.active,
      "p-carousel-item-start": props.start,
      "p-carousel-item-end": props.end
    });
  }
};
var inlineStyles = {
  itemsContent: function itemsContent(_ref7) {
    var height = _ref7.height;
    return {
      height
    };
  }
};
var CarouselBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Carousel",
    id: null,
    value: null,
    page: 0,
    header: null,
    footer: null,
    style: null,
    className: null,
    itemTemplate: null,
    circular: false,
    showIndicators: true,
    showNavigators: true,
    autoplayInterval: 0,
    numVisible: 1,
    numScroll: 1,
    prevIcon: null,
    nextIcon: null,
    responsiveOptions: null,
    orientation: "horizontal",
    verticalViewPortHeight: "300px",
    contentClassName: null,
    containerClassName: null,
    indicatorsContentClassName: null,
    onPageChange: null,
    children: void 0
  },
  css: {
    classes,
    styles,
    inlineStyles
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var CarouselItem = React.memo(function(props) {
  var mergeProps = useMergeProps();
  var ptm = props.ptm, cx = props.cx;
  var key = props.className && props.className === "p-carousel-item-cloned" ? "itemCloned" : "item";
  var content = props.template(props.item);
  var itemClonedProps = mergeProps({
    className: cx(key, {
      itemProps: props
    }),
    role: props.role,
    "aria-roledescription": props.ariaRoledescription,
    "aria-label": props.ariaLabel,
    "aria-hidden": props.ariaHidden,
    "data-p-carousel-item-active": props.active,
    "data-p-carousel-item-start": props.start,
    "data-p-carousel-item-end": props.end
  }, ptm(key));
  return React.createElement("div", itemClonedProps, content);
});
var Carousel = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = CarouselBase.getProps(inProps, context);
  var _React$useState = React.useState(props.numVisible), _React$useState2 = _slicedToArray(_React$useState, 2), numVisibleState = _React$useState2[0], setNumVisibleState = _React$useState2[1];
  var _React$useState3 = React.useState(props.numScroll), _React$useState4 = _slicedToArray(_React$useState3, 2), numScrollState = _React$useState4[0], setNumScrollState = _React$useState4[1];
  var _React$useState5 = React.useState(props.page * props.numScroll * -1), _React$useState6 = _slicedToArray(_React$useState5, 2), totalShiftedItemsState = _React$useState6[0], setTotalShiftedItemsState = _React$useState6[1];
  var _React$useState7 = React.useState(props.page), _React$useState8 = _slicedToArray(_React$useState7, 2), pageState = _React$useState8[0], setPageState = _React$useState8[1];
  var _CarouselBase$setMeta = CarouselBase.setMetaData({
    props,
    state: {
      numVisible: numVisibleState,
      numScroll: numScrollState,
      totalShiftedItems: totalShiftedItemsState,
      page: pageState
    }
  }), ptm = _CarouselBase$setMeta.ptm, cx = _CarouselBase$setMeta.cx, sx = _CarouselBase$setMeta.sx, isUnstyled = _CarouselBase$setMeta.isUnstyled;
  useHandleStyle(CarouselBase.css.styles, isUnstyled, {
    name: "carousel"
  });
  var elementRef = React.useRef(null);
  var itemsContainerRef = React.useRef(null);
  var remainingItems = React.useRef(0);
  var allowAutoplay = React.useRef(!!props.autoplayInterval);
  var attributeSelector = React.useRef("");
  var swipeThreshold = React.useRef(20);
  var startPos = React.useRef(null);
  var interval = React.useRef(null);
  var carouselStyle = React.useRef(null);
  var indicatorContent = React.useRef(null);
  var isRemainingItemsAdded = React.useRef(false);
  var responsiveOptions = React.useRef(null);
  var prevNumScroll = usePrevious(numScrollState);
  var prevNumVisible = usePrevious(numVisibleState);
  var prevValue = usePrevious(props.value);
  var prevPage = usePrevious(props.page);
  var isVertical = props.orientation === "vertical";
  var circular = props.circular || !!props.autoplayInterval;
  var isCircular = circular && props.value && props.value.length >= numVisibleState;
  var totalIndicators = props.value ? Math.max(Math.ceil((props.value.length - numVisibleState) / numScrollState) + 1, 0) : 0;
  var isAutoplay = totalIndicators && props.autoplayInterval && allowAutoplay.current;
  var isControlled = props.onPageChange && !isAutoplay;
  var currentPage = isControlled ? props.page : pageState;
  var _useResizeListener = useResizeListener({
    listener: function listener() {
      calculatePosition();
    },
    when: props.responsiveOptions
  }), _useResizeListener2 = _slicedToArray(_useResizeListener, 1), bindWindowResizeListener = _useResizeListener2[0];
  var step = function step2(dir, page) {
    var totalShiftedItems = totalShiftedItemsState;
    if (page != null) {
      totalShiftedItems = numScrollState * page * -1;
      if (isCircular) {
        totalShiftedItems = totalShiftedItems - numVisibleState;
      }
      isRemainingItemsAdded.current = false;
    } else {
      totalShiftedItems = totalShiftedItems + numScrollState * dir;
      if (isRemainingItemsAdded.current) {
        totalShiftedItems = totalShiftedItems + (remainingItems.current - numScrollState * dir);
        isRemainingItemsAdded.current = false;
      }
      var originalShiftedItems = isCircular ? totalShiftedItems + numVisibleState : totalShiftedItems;
      page = Math.abs(Math.floor(originalShiftedItems / numScrollState));
    }
    if (isCircular && pageState === totalIndicators - 1 && dir === -1) {
      totalShiftedItems = -1 * (props.value.length + numVisibleState);
      page = 0;
    } else if (isCircular && pageState === 0 && dir === 1) {
      totalShiftedItems = 0;
      page = totalIndicators - 1;
    } else if (page === totalIndicators - 1 && remainingItems.current > 0) {
      totalShiftedItems = totalShiftedItems + (remainingItems.current * -1 - numScrollState * dir);
      isRemainingItemsAdded.current = true;
    }
    if (itemsContainerRef.current) {
      !isUnstyled() && DomHandler.removeClass(itemsContainerRef.current, "p-items-hidden");
      changePosition(totalShiftedItems);
      itemsContainerRef.current.style.transition = "transform 500ms ease 0s";
    }
    changePage(page);
    setTotalShiftedItemsState(totalShiftedItems);
  };
  var calculatePosition = function calculatePosition2() {
    if (itemsContainerRef.current && responsiveOptions.current) {
      var windowWidth = window.innerWidth;
      var matchedResponsiveData = {
        numVisible: props.numVisible,
        numScroll: props.numScroll
      };
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        if (parseInt(res.breakpoint, 10) >= windowWidth) {
          matchedResponsiveData = res;
        }
      }
      if (numScrollState !== matchedResponsiveData.numScroll) {
        var page = Math.floor(currentPage * numScrollState / matchedResponsiveData.numScroll);
        var totalShiftedItems = matchedResponsiveData.numScroll * page * -1;
        if (isCircular) {
          totalShiftedItems = totalShiftedItems - matchedResponsiveData.numVisible;
        }
        setTotalShiftedItemsState(totalShiftedItems);
        setNumScrollState(matchedResponsiveData.numScroll);
        changePage(page);
      }
      if (numVisibleState !== matchedResponsiveData.numVisible) {
        setNumVisibleState(matchedResponsiveData.numVisible);
      }
    }
  };
  var navBackward = function navBackward2(e, page) {
    if (circular || currentPage !== 0) {
      step(1, page);
    }
    allowAutoplay.current = false;
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var navForward = function navForward2(e, page) {
    if (circular || currentPage < totalIndicators - 1) {
      step(-1, page);
    }
    allowAutoplay.current = false;
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var onIndicatorClick = function onIndicatorClick2(e, page) {
    if (page > currentPage) {
      navForward(e, page);
    } else if (page < currentPage) {
      navBackward(e, page);
    }
  };
  var onTransitionEnd = function onTransitionEnd2(e) {
    if (itemsContainerRef.current && e.propertyName === "transform") {
      DomHandler.addClass(itemsContainerRef.current, "p-items-hidden");
      itemsContainerRef.current.style.transition = "";
      if ((pageState === 0 || pageState === totalIndicators - 1) && isCircular) {
        changePosition(totalShiftedItemsState);
      }
    }
  };
  var _onTouchStart = function onTouchStart(e) {
    var touchobj = e.changedTouches[0];
    startPos.current = {
      x: touchobj.pageX,
      y: touchobj.pageY
    };
  };
  var _onTouchMove = function onTouchMove(e) {
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var _onTouchEnd = function onTouchEnd(e) {
    var touchobj = e.changedTouches[0];
    if (isVertical) {
      changePageOnTouch(e, touchobj.pageY - startPos.current.y);
    } else {
      changePageOnTouch(e, touchobj.pageX - startPos.current.x);
    }
  };
  var changePageOnTouch = function changePageOnTouch2(e, diff) {
    if (Math.abs(diff) > swipeThreshold.current) {
      if (diff < 0) {
        navForward(e);
      } else {
        navBackward(e);
      }
    }
  };
  var onIndicatorKeydown = function onIndicatorKeydown2(event) {
    switch (event.code) {
      case "ArrowRight":
        onRightKey();
        break;
      case "ArrowLeft":
        onLeftKey();
        break;
      case "Home":
        onHomeKey();
        event.preventDefault();
        break;
      case "End":
        onEndKey();
        event.preventDefault();
        break;
      case "ArrowUp":
      case "ArrowDown":
        event.preventDefault();
        break;
      case "Tab":
        onTabKey();
        break;
    }
  };
  var onRightKey = function onRightKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex + 1 === indicators2.length ? indicators2.length - 1 : activeIndex + 1);
  };
  var onLeftKey = function onLeftKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, activeIndex - 1 <= 0 ? 0 : activeIndex - 1);
  };
  var onHomeKey = function onHomeKey2() {
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, 0);
  };
  var onEndKey = function onEndKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]r'));
    var activeIndex = findFocusedIndicatorIndex();
    changedFocusedIndicator(activeIndex, indicators2.length - 1);
  };
  var onTabKey = function onTabKey2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var highlightedIndex = indicators2.findIndex(function(ind) {
      return DomHandler.getAttribute(ind, "data-p-highlight") === true;
    });
    var activeIndicator = DomHandler.findSingle(indicatorContent.current, '[data-pc-section="indicator"] > button[tabindex="0"]');
    var activeIndex = indicators2.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
    indicators2[activeIndex].children[0].tabIndex = "-1";
    indicators2[highlightedIndex].children[0].tabIndex = "0";
  };
  var findFocusedIndicatorIndex = function findFocusedIndicatorIndex2() {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    var activeIndicator = DomHandler.findSingle(indicatorContent.current, '[data-pc-section="indicator"] > button[tabindex="0"]');
    return indicators2.findIndex(function(ind) {
      return ind === activeIndicator.parentElement;
    });
  };
  var changedFocusedIndicator = function changedFocusedIndicator2(prevInd, nextInd) {
    var indicators2 = _toConsumableArray(DomHandler.find(indicatorContent.current, '[data-pc-section="indicator"]'));
    indicators2[prevInd].children[0].tabIndex = "-1";
    indicators2[nextInd].children[0].tabIndex = "0";
    indicators2[nextInd].children[0].focus();
  };
  var startAutoplay = function startAutoplay2() {
    if (props.autoplayInterval > 0) {
      interval.current = setInterval(function() {
        if (pageState === totalIndicators - 1) {
          step(-1, 0);
        } else {
          step(-1, pageState + 1);
        }
      }, props.autoplayInterval);
    }
  };
  var stopAutoplay = function stopAutoplay2() {
    if (interval.current) {
      clearInterval(interval.current);
    }
  };
  var createStyle = function createStyle2() {
    if (!carouselStyle.current) {
      carouselStyle.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact.nonce, context && context.styleContainer);
    }
    var innerHTML = "\n            .p-carousel[".concat(attributeSelector.current, "] .p-carousel-item {\n                flex: 1 0 ").concat(100 / numVisibleState, "%\n            }\n        ");
    if (props.responsiveOptions) {
      var comparator = ObjectUtils.localeComparator(context && context.locale || PrimeReact.locale);
      responsiveOptions.current = _toConsumableArray(props.responsiveOptions);
      responsiveOptions.current.sort(function(data1, data2) {
        var value1 = data1.breakpoint;
        var value2 = data2.breakpoint;
        return ObjectUtils.sort(value1, value2, -1, comparator, context && context.nullSortOrder || PrimeReact.nullSortOrder);
      });
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        innerHTML = innerHTML + "\n                    @media screen and (max-width: ".concat(res.breakpoint, ") {\n                        .p-carousel[").concat(attributeSelector.current, "] .p-carousel-item {\n                            flex: 1 0 ").concat(100 / res.numVisible, "%\n                        }\n                    }\n                ");
      }
      calculatePosition();
    }
    carouselStyle.current.innerHTML = innerHTML;
  };
  var destroyStyle = function destroyStyle2() {
    carouselStyle.current = DomHandler.removeInlineStyle(carouselStyle.current);
  };
  var changePosition = function changePosition2(totalShiftedItems) {
    if (itemsContainerRef.current) {
      itemsContainerRef.current.style.transform = isVertical ? "translate3d(0, ".concat(totalShiftedItems * (100 / numVisibleState), "%, 0)") : "translate3d(".concat(totalShiftedItems * (100 / numVisibleState), "%, 0, 0)");
    }
  };
  var changePage = function changePage2(page) {
    !isControlled && setPageState(page);
    props.onPageChange && props.onPageChange({
      page
    });
  };
  React.useImperativeHandle(ref, function() {
    return {
      props,
      startAutoplay,
      stopAutoplay,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useMountEffect(function() {
    if (elementRef.current) {
      attributeSelector.current = UniqueComponentId();
      elementRef.current.setAttribute(attributeSelector.current, "");
    }
    if (!carouselStyle.current) {
      calculatePosition();
      changePosition(totalShiftedItemsState);
      bindWindowResizeListener();
    }
  });
  useUpdateEffect(function() {
    var stateChanged = false;
    var totalShiftedItems = totalShiftedItemsState;
    createStyle();
    if (props.autoplayInterval) {
      stopAutoplay();
    }
    if (prevNumScroll !== numScrollState || prevNumVisible !== numVisibleState || props.value && prevValue && prevValue.length !== props.value.length) {
      remainingItems.current = (props.value.length - numVisibleState) % numScrollState;
      var page = currentPage;
      if (totalIndicators !== 0 && page >= totalIndicators) {
        page = totalIndicators - 1;
        changePage(page);
        stateChanged = true;
      }
      totalShiftedItems = page * numScrollState * -1;
      if (isCircular) {
        totalShiftedItems = totalShiftedItems - numVisibleState;
      }
      if (page === totalIndicators - 1 && remainingItems.current > 0) {
        totalShiftedItems = totalShiftedItems + (-1 * remainingItems.current + numScrollState);
        isRemainingItemsAdded.current = true;
      } else {
        isRemainingItemsAdded.current = false;
      }
      if (totalShiftedItems !== totalShiftedItemsState) {
        setTotalShiftedItemsState(totalShiftedItems);
        stateChanged = true;
      }
      changePosition(totalShiftedItems);
    }
    if (isCircular) {
      if (pageState === 0) {
        totalShiftedItems = -1 * numVisibleState;
      } else if (totalShiftedItems === 0) {
        totalShiftedItems = -1 * props.value.length;
        if (remainingItems.current > 0) {
          isRemainingItemsAdded.current = true;
        }
      }
      if (totalShiftedItems !== totalShiftedItemsState) {
        setTotalShiftedItemsState(totalShiftedItems);
        stateChanged = true;
      }
    }
    if (prevPage !== props.page) {
      if (props.page > prevPage && props.page <= totalIndicators - 1) {
        step(-1, props.page);
      } else if (props.page < prevPage) {
        step(1, props.page);
      }
    }
    if (!stateChanged && isAutoplay) {
      startAutoplay();
    }
    return function() {
      if (props.autoplayInterval) {
        stopAutoplay();
      }
      destroyStyle();
    };
  });
  var ariaSlideNumber = function ariaSlideNumber2(value) {
    return ariaLabel("slideNumber", {
      slideNumber: value
    });
  };
  var createItems = function createItems2() {
    if (props.value && props.value.length) {
      var clonedItemsForStarting = null;
      var clonedItemsForFinishing = null;
      if (isCircular) {
        var clonedElements = null;
        clonedElements = props.value.slice(-1 * numVisibleState);
        clonedItemsForStarting = clonedElements.map(function(item2, index) {
          var isActive = totalShiftedItemsState * -1 === props.value.length + numVisibleState;
          var start = index === 0;
          var end = index === clonedElements.length - 1;
          var key = index + "_scloned";
          return React.createElement(CarouselItem, {
            key,
            className: "p-carousel-item-cloned",
            template: props.itemTemplate,
            item: item2,
            active: isActive,
            start,
            end,
            ptm,
            cx
          });
        });
        clonedElements = props.value.slice(0, numVisibleState);
        clonedItemsForFinishing = clonedElements.map(function(item2, index) {
          var isActive = totalShiftedItemsState === 0;
          var start = index === 0;
          var end = index === clonedElements.length - 1;
          var key = index + "_fcloned";
          return React.createElement(CarouselItem, {
            key,
            className: "p-carousel-item-cloned",
            template: props.itemTemplate,
            item: item2,
            active: isActive,
            start,
            end,
            ptm,
            cx
          });
        });
      }
      var items = props.value.map(function(item2, index) {
        var firstIndex = isCircular ? -1 * (totalShiftedItemsState + numVisibleState) : totalShiftedItemsState * -1;
        var lastIndex = firstIndex + numVisibleState - 1;
        var isActive = firstIndex <= index && lastIndex >= index;
        var start = firstIndex === index;
        var end = lastIndex === index;
        var ariaHidden = firstIndex > index || lastIndex < index ? true : void 0;
        var ariaLabel2 = ariaSlideNumber(index);
        var ariaRoledescription = localeOption("aria") ? localeOption("aria").slide : void 0;
        return React.createElement(CarouselItem, {
          key: index,
          template: props.itemTemplate,
          item: item2,
          active: isActive,
          start,
          ariaHidden,
          ariaLabel: ariaLabel2,
          ariaRoledescription,
          role: "group",
          end,
          ptm,
          cx
        });
      });
      return React.createElement(React.Fragment, null, clonedItemsForStarting, items, clonedItemsForFinishing);
    }
  };
  var createHeader = function createHeader2() {
    if (props.header) {
      var headerProps = mergeProps({
        className: cx("header")
      }, ptm("header"));
      return React.createElement("div", headerProps, props.header);
    }
    return null;
  };
  var createFooter = function createFooter2() {
    if (props.footer) {
      var footerProps = mergeProps({
        className: cx("footer")
      }, ptm("footer"));
      return React.createElement("div", footerProps, props.footer);
    }
    return null;
  };
  var createContent = function createContent2() {
    var items = createItems();
    var height = isVertical ? props.verticalViewPortHeight : "auto";
    var backwardNavigator = createBackwardNavigator();
    var forwardNavigator = createForwardNavigator();
    var itemsContentProps = mergeProps({
      className: cx("itemsContent"),
      style: sx("itemsContent", {
        height
      }),
      onTouchStart: function onTouchStart(e) {
        return _onTouchStart(e);
      },
      onTouchMove: function onTouchMove(e) {
        return _onTouchMove(e);
      },
      onTouchEnd: function onTouchEnd(e) {
        return _onTouchEnd(e);
      }
    }, ptm("itemsContent"));
    var containerProps = mergeProps({
      className: classNames(props.containerClassName, cx("container")),
      "aria-live": allowAutoplay.current ? "polite" : "off"
    }, ptm("container"));
    var itemsContainerProps = mergeProps({
      className: cx("itemsContainer"),
      onTransitionEnd
    }, ptm("itemsContainer"));
    return React.createElement("div", containerProps, backwardNavigator, React.createElement("div", itemsContentProps, React.createElement("div", _extends({
      ref: itemsContainerRef
    }, itemsContainerProps), items)), forwardNavigator);
  };
  var createBackwardNavigator = function createBackwardNavigator2() {
    if (props.showNavigators) {
      var isDisabled = (!circular || props.value && props.value.length < numVisibleState) && currentPage === 0;
      var previousButtonIconProps = mergeProps({
        className: cx("previousButtonIcon")
      }, ptm("previousButtonIcon"));
      var icon = isVertical ? props.prevIcon || React.createElement(ChevronUpIcon, previousButtonIconProps) : props.prevIcon || React.createElement(ChevronLeftIcon, previousButtonIconProps);
      var backwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, previousButtonIconProps), {
        props
      });
      var previousButtonProps = mergeProps({
        type: "button",
        className: cx("previousButton", {
          isDisabled
        }),
        onClick: function onClick(e) {
          return navBackward(e);
        },
        disabled: isDisabled,
        "aria-label": localeOption("aria") ? localeOption("aria").previousPageLabel : void 0,
        "data-pc-group-section": "navigator"
      }, ptm("previousButton"));
      return React.createElement("button", previousButtonProps, backwardNavigatorIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var createForwardNavigator = function createForwardNavigator2() {
    if (props.showNavigators) {
      var isDisabled = (!circular || props.value && props.value.length < numVisibleState) && (currentPage === totalIndicators - 1 || totalIndicators === 0);
      var nextButtonIconProps = mergeProps({
        className: cx("nextButtonIcon")
      }, ptm("nextButtonIcon"));
      var icon = isVertical ? props.nextIcon || React.createElement(ChevronDownIcon, nextButtonIconProps) : props.nextIcon || React.createElement(ChevronRightIcon, nextButtonIconProps);
      var forwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, nextButtonIconProps), {
        props
      });
      var nextButtonProps = mergeProps({
        type: "button",
        className: cx("nextButton", {
          isDisabled
        }),
        onClick: function onClick(e) {
          return navForward(e);
        },
        disabled: isDisabled,
        "aria-label": localeOption("aria") ? localeOption("aria").nextPageLabel : void 0,
        "data-pc-group-section": "navigator"
      }, ptm("nextButton"));
      return React.createElement("button", nextButtonProps, forwardNavigatorIcon, React.createElement(Ripple, null));
    }
    return null;
  };
  var ariaPageLabel = function ariaPageLabel2(value) {
    return ariaLabel("pageLabel", {
      page: value
    });
  };
  var createIndicator = function createIndicator2(index) {
    var isActive = currentPage === index;
    var getPTOptions = function getPTOptions2(key2) {
      return ptm(key2, {
        context: {
          active: isActive
        }
      });
    };
    var key = "carousel-indicator-" + index;
    var indicatorProps = mergeProps({
      key,
      className: cx("indicator", {
        isActive
      }),
      "data-p-highlight": isActive
    }, getPTOptions("indicator"));
    var indicatorButtonProps = mergeProps({
      type: "button",
      className: cx("indicatorButton"),
      tabIndex: currentPage === index ? "0" : "-1",
      onClick: function onClick(e) {
        return onIndicatorClick(e, index);
      },
      "aria-label": ariaPageLabel(index + 1),
      "aria-current": currentPage === index ? "page" : void 0
    }, getPTOptions("indicatorButton"));
    return React.createElement("li", indicatorProps, React.createElement("button", indicatorButtonProps, React.createElement(Ripple, null)));
  };
  var createIndicators = function createIndicators2() {
    if (props.showIndicators) {
      var _indicators = [];
      for (var i = 0; i < totalIndicators; i++) {
        _indicators.push(createIndicator(i));
      }
      var indicatorsProps = mergeProps({
        ref: indicatorContent,
        className: classNames(props.indicatorsContentClassName, cx("indicators")),
        onKeyDown: onIndicatorKeydown
      }, ptm("indicators"));
      return React.createElement("ul", indicatorsProps, _indicators);
    }
    return null;
  };
  var content = createContent();
  var indicators = createIndicators();
  var header = createHeader();
  var footer = createFooter();
  var rootProps = mergeProps({
    id: props.id,
    ref: elementRef,
    className: classNames(props.className, cx("root", {
      isVertical
    })),
    style: props.style,
    role: "region"
  }, CarouselBase.getOtherProps(props), ptm("root"));
  var contentProps = mergeProps({
    className: classNames(props.contentClassName, cx("content"))
  }, ptm("content"));
  return React.createElement("div", rootProps, header, React.createElement("div", contentProps, content, indicators), footer);
}));
CarouselItem.displayName = "CarouselItem";
Carousel.displayName = "Carousel";
export {
  Carousel
};
//# sourceMappingURL=primereact_carousel.js.map
